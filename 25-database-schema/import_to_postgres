#!/bin/env python

from glob import glob
import sys
import json
sys.path.insert(0, '.')
from pg_utilities import VenuesReader, MemberReader, GroupReader, GroupMemberReader, EventReader
import  psycopg2, psycopg2.extras

data_dir = "../10-data/"

db_conn = psycopg2.connect("dbname='infovis_meetup'")
db_conn.autocommit = True
db_cursor = db_conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

from sqlalchemy import create_engine
engine = create_engine('postgresql+psycopg2:///infovis_meetup')

all_groups = [ path.replace("%s/events_updated/" % data_dir, "").replace(".json","") for path in glob("%s/events_updated/*.json" % data_dir) ]
print all_groups


if True:
  for df in VenuesReader( all_groups , do_max = True):
    if not 'id_venue' in df.columns:
      print "skipping venue df with len=%d, columns %s" % ( len(df.index), df.columns.values) 
    else:
      df.to_sql('venues', engine, if_exists = 'append', index = False)

  # manual fixes:  lat + lon cannot be null in python dataframes, have to find nulls again in postgres:    
  db_cursor.execute("update venues set lat=null,lon=null where lat=0.0 and lon=0.0")
  db_cursor.execute("select count(*) as c from venues")
  print "%d venues inserted" % db_cursor.fetchone()['c']


if True:
  db_cursor.execute("delete from members")
  for df in MemberReader( all_groups, do_max = True):
    if 'status' in df.columns:
      del( df['status'] )
    if not 'id_member' in df.columns:
      print "skipping member df with len=%d, columns %s" % ( len(df.index), df.columns.values) 
    else:
      print df[ df['id_member'] == 104699912 ]
      df.to_sql('members', engine, if_exists = 'append', index = False)
  db_cursor.execute("select count(*) as c from members")
  m1 = db_cursor.fetchone()['c']
  print "%d members inserted" % m1

if True:
  db_cursor.execute("select count(*) as c from members")
  m1 = db_cursor.fetchone()['c']
  orgas = json.load(open(data_dir + "organizers.json"))
  for o in orgas:
    db_cursor.execute("""INSERT INTO members (id_member) 
                          SELECT %(id)s
                          WHERE NOT EXISTS (
                            SELECT 1 FROM members WHERE id_member=%(id)s
                          )""", { 'id': str( o['member_id'] )} )
  db_cursor.execute("select count(*) as c from members")
  m2 = db_cursor.fetchone()['c']
  print "%d more organizser inserted" % (m2 - m1)
  print "%d members in all" % m2


if True:
  db_cursor.execute("delete from groups")
  for df in GroupReader( do_max = True):
    if not 'id_group' in df.columns or not 'member_id_organizer' in df.columns:
      print "skipping group df with len=%d, columns %s" % ( len(df.index), df.columns.values) 
    else:
      df.rename(columns = {'member_id_organizer': 'id_organizer', 'members': 'no_members'}, inplace=True)
      df.to_sql('groups', engine, if_exists = 'append', index = False)
  db_cursor.execute("select count(*) as c from groups")
  print "%d groups inserted" % db_cursor.fetchone()['c']


if True:
  db_cursor.execute("delete from is_member_of")
  for df in GroupMemberReader( all_groups, do_max = True):
    if 'status' in df.columns:
      del( df['status'] )
    if  not ('id_member' in df.columns) or not ('id_group' in df.columns):
      print "skipping df with len=%d, columns %s" % ( len(df.index), df.columns.values) 
    else:
      df.to_sql('is_member_of', engine, if_exists = 'append', index = False)
  db_cursor.execute("select count(*) as c from is_member_of")
  print "%d is_member_of records inserted" % db_cursor.fetchone()['c']


if True:
  db_cursor.execute("delete from events")
  for df in EventReader( all_groups, do_max = True):
    if  not ('id_event' in df.columns):
      print "skipping event df with len=%d, columns %s" % ( len(df.index), df.columns.values ) 
    else:
      df.to_sql('events', engine, if_exists = 'append', index = False)
  db_cursor.execute("select count(*) as c from events")
  print "%d event inserted" % db_cursor.fetchone()['c']


